# Stage 1: Build webapp
FROM node:20-alpine AS webapp-builder

WORKDIR /app

# Copy root package.json and package-lock.json
COPY package.json package-lock.json ./
COPY webapp/package.json ./webapp/

# Install all dependencies for webapp build
RUN npm ci

# Copy webapp source
COPY webapp/ ./webapp/

# Build webapp
RUN npm run -w webapp build

# Stage 2: Build bot dependencies and shared packages
FROM node:20-alpine AS builder-deps

WORKDIR /app

# Copy root package.json and package-lock.json
COPY package.json package-lock.json ./
COPY packages/database/package.json ./packages/database/
COPY packages/logger/package.json ./packages/logger/
COPY bot/package.json ./bot/

# Install ALL dependencies (including dev) for building
RUN npm ci

# Copy database package and generate Prisma client
COPY packages/database/ ./packages/database/
RUN npm run db:generate

# Build database package
RUN npm run -w @repo/database build

# Copy and build shared logger package
COPY packages/logger/ ./packages/logger/
RUN npm run -w @repo/logger build

# Stage 3: Build bot TypeScript
FROM node:20-alpine AS builder

WORKDIR /app

# Copy dependencies from previous stage
COPY --from=builder-deps /app/node_modules ./node_modules
COPY --from=builder-deps /app/packages ./packages
COPY --from=builder-deps /app/package.json /app/package-lock.json ./

# Copy bot source
COPY bot/package.json ./bot/
COPY bot/tsconfig.json ./bot/
COPY bot/src ./bot/src

# Build bot
WORKDIR /app/bot
RUN npm run build

# Stage 4: Production runtime
FROM node:20-alpine

WORKDIR /app

# Copy built packages from builder stage (includes package.json and compiled code)
COPY --from=builder-deps /app/packages ./packages

# Copy root and bot package files
COPY package.json package-lock.json ./
COPY bot/package.json ./bot/

# Install production dependencies only
RUN npm ci --omit=dev

# Copy built bot from builder stage
COPY --from=builder /app/bot/dist ./bot/dist

# Copy built webapp from webapp-builder stage
COPY --from=webapp-builder /app/webapp/dist ./bot/public

# Set working directory to bot
WORKDIR /app/bot

# Expose API port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"

# Start bot service in production mode
CMD ["npm", "start"]

